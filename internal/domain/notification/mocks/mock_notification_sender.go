// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/notification/interfaces/notification.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationSender is a mock of NotificationSender interface.
type MockNotificationSender struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSenderMockRecorder
}

// MockNotificationSenderMockRecorder is the mock recorder for MockNotificationSender.
type MockNotificationSenderMockRecorder struct {
	mock *MockNotificationSender
}

// NewMockNotificationSender creates a new mock instance.
func NewMockNotificationSender(ctrl *gomock.Controller) *MockNotificationSender {
	mock := &MockNotificationSender{ctrl: ctrl}
	mock.recorder = &MockNotificationSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationSender) EXPECT() *MockNotificationSenderMockRecorder {
	return m.recorder
}

// SendAccountConfirmation mocks base method.
func (m *MockNotificationSender) SendAccountConfirmation(ctx context.Context, email, username, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAccountConfirmation", ctx, email, username, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAccountConfirmation indicates an expected call of SendAccountConfirmation.
func (mr *MockNotificationSenderMockRecorder) SendAccountConfirmation(ctx, email, username, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAccountConfirmation", reflect.TypeOf((*MockNotificationSender)(nil).SendAccountConfirmation), ctx, email, username, token)
}

// SendPasswordReset mocks base method.
func (m *MockNotificationSender) SendPasswordReset(ctx context.Context, email, username, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordReset", ctx, email, username, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordReset indicates an expected call of SendPasswordReset.
func (mr *MockNotificationSenderMockRecorder) SendPasswordReset(ctx, email, username, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordReset", reflect.TypeOf((*MockNotificationSender)(nil).SendPasswordReset), ctx, email, username, token)
}
