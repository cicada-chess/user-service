// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/profile/interfaces/storage.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProfileStorage is a mock of ProfileStorage interface.
type MockProfileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockProfileStorageMockRecorder
}

// MockProfileStorageMockRecorder is the mock recorder for MockProfileStorage.
type MockProfileStorageMockRecorder struct {
	mock *MockProfileStorage
}

// NewMockProfileStorage creates a new mock instance.
func NewMockProfileStorage(ctrl *gomock.Controller) *MockProfileStorage {
	mock := &MockProfileStorage{ctrl: ctrl}
	mock.recorder = &MockProfileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileStorage) EXPECT() *MockProfileStorageMockRecorder {
	return m.recorder
}

// SaveAvatar mocks base method.
func (m *MockProfileStorage) SaveAvatar(ctx context.Context, userID string, avatarData io.Reader, fileExt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatar", ctx, userID, avatarData, fileExt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAvatar indicates an expected call of SaveAvatar.
func (mr *MockProfileStorageMockRecorder) SaveAvatar(ctx, userID, avatarData, fileExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatar", reflect.TypeOf((*MockProfileStorage)(nil).SaveAvatar), ctx, userID, avatarData, fileExt)
}
